/* strucutres for the different elements:
 *  -p: vector for the position in the parent frame
 *  -q: unit quaternion for the orientation
 */
defstruct(frame(p, q));

/* create a frame from the given string prefix
 * example: makeFrame("base\\.beam");
 */
makeFrame(prefix) ::= 
    new (frame (
        [ parse_string(concat(prefix, "\\.dx")),
          parse_string(concat(prefix, "\\.dy")),
          parse_string(concat(prefix, "\\.dz"))
        ],
        [ parse_string(concat(prefix, "\\.q_a")),
          parse_string(concat(prefix, "\\.q_i")),
          parse_string(concat(prefix, "\\.q_j")),
          parse_string(concat(prefix, "\\.q_k"))
        ]
    ));

/* macro to move things in and out of frames
 */
vecFromFrame(f, p) := f@p + rotate(p, f@q);
vecToFrame(p, f) := rotate(p - f@p, inverse(f@q));
quatFromFrame(f, q) := mult(f@q, q);
quatToFrame(q, f) := mult(inverse(f@q), q);

/* domain constraints
 */
boundFrame(f, lb, ub) := [
    unit(f@q),
    f@q[1] >= -1, f@q[1] <= 1,
    f@q[2] >= -1, f@q[2] <= 1,
    f@q[3] >= -1, f@q[3] <= 1,
    f@q[4] >= -1, f@q[4] <= 1,
    f@p[1] >= lb, f@p[1] <= ub,
    f@p[2] >= lb, f@p[2] <= ub,
    f@p[3] >= lb, f@p[3] <= ub
];
boundAngle(a) := [a >= - 3.15, a <= 3.15];

