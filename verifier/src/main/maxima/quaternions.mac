
/* Rotations are represented using (unit) quaternions, [a, i, j, k]
 *  Positions are represented using 3D vectors, [x, y, z]
 *  A vector is expended into a quaternion as [0, x, y, z]
 */
v2q(q) := [0, q[1], q[2], q[3]];
q2v(q) := [q[2],q[3],q[4]];
mkQuat(alpha, direction) := cons(cos(alpha/2), sin(alpha/2) * direction);

/* Hammilton product for quaternions
 */
mult(a, b) := [ a[1] * b[1] - a[2] * b[2] - a[3] * b[3] - a[4] * b[4],
                a[1] * b[2] + a[2] * b[1] + a[3] * b[4] - a[4] * b[3],
                a[1] * b[3] - a[2] * b[4] + a[3] * b[1] + a[4] * b[2],
                a[1] * b[4] + a[2] * b[3] - a[3] * b[2] + a[4] * b[1]];

/* The inverse (^-1) of a quaternion
  */
inverse(a) := [a[1], -a[2], -a[3], -a[4]];

/* rotation of p by q as q*p*q^-1
 */
rotate(p, q) := ratsimp(q2v(mult(mult(q, v2q(p)), inverse(q))));

/* size of quaternion
 */
size(a) := sqrt(a[1] * a[1] + a[2] * a[2] + a[3] * a[3] + a[4] * a[4]);

/* unit quaternion
 */
unit(a) := a[1] * a[1] + a[2] * a[2] + a[3] * a[3] + a[4] * a[4] = 1;

/* equality for quaternions and vectors
 */
vecEq(a, b) := [a[1] = b[1], a[2] = b[2], a[3] = b[3]];
quatEq(a, b) := [a[1] = b[1], a[2] = b[2], a[3] = b[3], a[4] = b[4]];

/* dot product and norm for 3d vectors
 */
dotprod(a, b) := ratsimp(a[1] * b[1] + a[2] * b[2] + a[3] * b[3]);
norm(a) := ratsimp(sqrt(dotprod(a, a)));
unit(q) := ratsimp(q[1]^2 + q[2]^2 + q[3]^2 + q[4]^2 = 1);
crossprod(a, b) := ratsimp([ a[2]*b[3] - a[3]*b[2],
                             a[3]*b[1] - a[1]*b[3],
                             a[1]*b[2] - a[2]*b[1]]);

/* projections:
   -point_plane(p, p0, n): p is a point, p0 is a point in the plane, n is the normal to the plane (with |n| = 1)
   -line_plane(l0, l, p0, n): l is the vector defining the line, l0 a point on the line.
 */
point_plane(p, p0, n) := p - dotprod(p - p0, n) * n;
line_plane(l0, l, p0, n) := l0 + l * dotprod(p0-l0, n) / dotprod(l, n);

