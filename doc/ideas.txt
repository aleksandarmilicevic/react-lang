Language strucuture:
-what are the link between the physical world and language abstractions:
    -robots are their own unit which is a collection of controller with different modes
    -what is a good abstraction of a swarm/formation ?
-interface of a robot, event declaration, protocol/behavior
-how do we model the robot dynamic ?
-how do we model the environement ?

Doing something different:
-The URDF files contains a physical description of the robots: parts, dimensions, connections, joints. Can we use that ?
-I doubt the average user will care about verification for the sake of verification, what else can we offer him ?
-rather than imperative: transition as a relation over primed and unprimed variables. set of directed/stratified/linear equations ?
...

Language constructs:
-sensor pull vs push ? elegant syntax to pull inputs
-extension/inheritance/inclusion/renaming/nesting ?
-escape hatch (C/python code)
-queuing of event (avoiding oveflow with idempotent events) ?
-try/catch for exceptions (division by 0, out-of-memory, user-defined, ...) ?
-tuples (mutable vs immutable)
-records: by ref/value, (im)mutable ?
-global definition ? (easily changing some type, e.g. increase the precision)

Specifications and verification:
-input (external vs internal) vs output
-invariant for states
-requires/ensures clauses for events/actions
-proving that the discrete part quiesce ? decreases spec for loops
-verification: something predictable -> good property for hybrid tools and that we get good feedback if it fails (e.g.  trace to collision, cannot prove that the system get stable within 5 seconds)

Semantics: language, time, and dynamics:
-Giotto-like:
    -computational task: take some time
    -driver/actuators: take no time
    -static scheduling with WCET
-specifying the robot dynamics in the controller ?
    -to make the verification easier
    -what additional value can we provide ?
-...
