two wheeled robot:

state:
-translational:
  -position: p = (x, y)
  -speed: v = (vx, vy)
-rotational:
  -position: Φ
  -angular speed: vΦ

the controllable parts are the (speed of the) wheels:
    c = (l, r) (for controllable, left, and right)

kinematic model for the two wheeled robot:
  vx∙tan(Φ) - vy = 0

----------------------------------------

description of the physical robot:
-parts:
  -body: cube([-5,-10,1], [5,10,4])
  -left wheel:  translate([0, 10,2.5]) rotate([ 90,0,0]) cylinder(r = 5, h = 1)
  -right wheel: translate([0,-10,2.5]) rotate([-90,0,0]) cylinder(r = 5, h = 1)
-connections:
  -body to left wheel via left motor
  -body to right wheel via right motor 
-actuators:
  -left motor at [0,10,2.5] controlled via l (counter clockwise)
  -right motor at [0,-10,2.5] controlled via r (clockwise)
    torque: τ = K_t∙I (K_t is a torque propotionality constant)
    voltage: V = K_v∙ω (K_v is a constant for back electromotive force, assume no motor resistance)
    power: P ≈ (K_v/K_t)∙τ∙ω
    speed: v = 2∙π∙r_w∙ω (r_w is the radius of the wheel)
-sensor:
  -distance sensor at [5,0,3] facing [1,0,0] produced input d
   assumes that the sensing area is [5,-10] to [5,100] and the return distance is the closest object
-mass: m (uniformly spread)

----------------------------------------
dynamics:
  center of mass is the middle of the robot
  angular momentum (rod with rotation at center): inertia = L ^ m^2 / 12 where L = 12 (width of body + wheels)
  do we consider some kind of drag ?

----------------------------------------
controller:
  takes input from the user: forward, stop, left, right
  produce the corresponding output, must override the user choice to avoid collision

  local mode ∈ {F,L,R,S}
  on forward: mode ← F
  on left: mode ← L
  on right: mode ← R
  on stop: mode ← S

  every 100ms:
    read from distance sensor d
    if mode = F ∧ d > 24  then l←10; r←10
    if mode = L ∧ d > 12  then l←-5; r← 5
    if mode = R ∧ d > 12  then l← 5; r←-5
    if mode = S           then l← 0; r← 0

----------------------------------------
environment:
  a bounding box of 100 x 100 centered at (0,0)

----------------------------------------
property:
  □ (-48 < x < 48 ∧ -48 < y < 48)

========================================

Let's examine different dynamics
--------------------------------
(1) controller set the speed of the wheels (no slipping, infinite torque)
(2) controller set the torque/power of the motor (no slipping)
(3-4) repeat (1)-(2) with slipping and skidding
(5) on level of indirection: add a PID controller (https://en.wikipedia.org/wiki/PID_controller) for the stopping distance, etc..

let use ′ for derivative:
x′ = cos(Φ)∙(v_l + v_r)/2
y′ = sin(Φ)∙(v_l + v_r)/2
Φ′ = atan((-v_l + v_r) / L)
v = 2π∙r∙ω [for both l/r]

(1) controller set ω of each wheel

(2) controller set the power: v′ = (2π∙P)/(K∙m∙v) [for both l/r]


