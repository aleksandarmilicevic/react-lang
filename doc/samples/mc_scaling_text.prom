/* runspin: %spin -a        %gcc -o pan -DSAFETY -DBFS -DMEMLIM=4096 -DMA=24 pan.c       %./pan        % */

/* with N=1, DIM=2, STEPS=4, SMAX=1: we can explore the full space depth:2030, mem: 522M, t: 255s */
/* with N=1, DIM=2, STEPS=5, SMAX=2: we can explore the full space depth:2020, mem: 815M, t: 460s */
/* with N=2, DIM=2, STEPS=4, SMAX=1, and 4G memory: we can explore up to depth 82 in 211s */
/* with N=3, DIM=3, STEPS=10, SMAX=5, and 4G memory: we can explore up to depth 21 (compiles with -DMA-28)*/

#define N       2
#define DIM     2
#define STEPS   4
#define SMAX    1

#define X       0
#define Y       1
#define Z       2

#define LESS 0
#define MORE 1

typedef Robot
{
    byte position[DIM];
    byte speed[DIM];
};

Robot robots[N];

init {
    do
    ::  atomic {

            //TODO initialize the robots

            byte robot, axis;
            bit action;

            //pick a robot, an axis, and an action
            if
            :: N >= 1 && DIM > X -> d_step { robot = 0; axis = X; action = LESS; } 
            :: N >= 1 && DIM > X -> d_step { robot = 0; axis = X; action = MORE; } 
            :: N >= 1 && DIM > Y -> d_step { robot = 0; axis = Y; action = LESS; } 
            :: N >= 1 && DIM > Y -> d_step { robot = 0; axis = Y; action = MORE; } 
            :: N >= 1 && DIM > Z -> d_step { robot = 0; axis = Z; action = LESS; } 
            :: N >= 1 && DIM > Z -> d_step { robot = 0; axis = Z; action = MORE; } 
            :: N >= 2 && DIM > X -> d_step { robot = 1; axis = X; action = LESS; } 
            :: N >= 2 && DIM > X -> d_step { robot = 1; axis = X; action = MORE; } 
            :: N >= 2 && DIM > Y -> d_step { robot = 1; axis = Y; action = LESS; } 
            :: N >= 2 && DIM > Y -> d_step { robot = 1; axis = Y; action = MORE; } 
            :: N >= 2 && DIM > Z -> d_step { robot = 1; axis = Z; action = LESS; } 
            :: N >= 2 && DIM > Z -> d_step { robot = 1; axis = Z; action = MORE; } 
            :: N >= 3 && DIM > X -> d_step { robot = 2; axis = X; action = LESS; } 
            :: N >= 3 && DIM > X -> d_step { robot = 2; axis = X; action = MORE; } 
            :: N >= 3 && DIM > Y -> d_step { robot = 2; axis = Y; action = LESS; } 
            :: N >= 3 && DIM > Y -> d_step { robot = 2; axis = Y; action = MORE; } 
            :: N >= 3 && DIM > Z -> d_step { robot = 2; axis = Z; action = LESS; } 
            :: N >= 3 && DIM > Z -> d_step { robot = 2; axis = Z; action = MORE; } 
            :: N >= 4 && DIM > X -> d_step { robot = 3; axis = X; action = LESS; } 
            :: N >= 4 && DIM > X -> d_step { robot = 3; axis = X; action = MORE; } 
            :: N >= 4 && DIM > Y -> d_step { robot = 3; axis = Y; action = LESS; } 
            :: N >= 4 && DIM > Y -> d_step { robot = 3; axis = Y; action = MORE; } 
            :: N >= 4 && DIM > Z -> d_step { robot = 3; axis = Z; action = LESS; } 
            :: N >= 4 && DIM > Z -> d_step { robot = 3; axis = Z; action = MORE; } 
            :: else -> skip;
            fi;

            d_step {
                
                //exectute the update
                if
                :: robot < N && action == LESS && robots[robot].speed[axis] > -SMAX -> robots[robot].speed[axis] = robots[robot].speed[axis] -1;
                :: robot < N && action == MORE && robots[robot].speed[axis] <  SMAX -> robots[robot].speed[axis] = robots[robot].speed[axis] +1;
                :: else -> skip;
                fi;

                //one time step
                byte i,j;
                i = 0;
                do
                :: i < N ->
                    j = 0;
                    do
                    :: j < DIM -> 
                        robots[i].position[j] = (robots[i].position[j] + robots[i].speed[j]) % STEPS;
                        j++;
                    :: else -> break;
                    od;
                    i++;
                :: else -> break;
                od;
                //reset vars
                robot = 0;
                axis = 0;
                action = 0;
            }
        }
    od;
}
