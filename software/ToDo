# Language
-syntax of the robot description
-write down a formal semantics

# Frontend

## Parser

still awkward ...

need to add the physical part and specs

## Typer

nothing done yet


# Backend

Python code generation re-using what was previously done.

For the moment, let us start with the case of a single robot.

ROS publish subscribe are many-to-many communication.
By careful with the buffer semantics are dropped messages.
seems there are both publish and subscribe queue.
what about message declaration

also generate a script to boot the system: run the ROS master + the main context (source the config scripts, etc.)

## context data-structure, methods
-event queue
-resolving handler of a given event
-register controller and timeouts clauses
-...

## initializing a context
-allocating the memory/thread/etc.
-registering with master?, ros init?, creating the ROS topics
-executing the `onCreate` handler
-enter the big-while-loop
-init the timer if needed

## the big-while-loop
-find an handler to execute:
  -rosspin (+ timeout) to get a message
-resolve and execute handler (what if no handler ?)
-set new timeout or move to another state

## moving to another state
-move to new state
-register new controller function

# Analysis and Transformation
...
