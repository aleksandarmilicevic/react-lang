Language
========

To make things a bit simpler, we will aim for a shallow embedding into Scala and pimp it wth a few macros to make it less rough around the edges.
The macro can be used to generate a shadow state and process the changes in variable into the mouvement commands we discussed.

Frontend
========

beautify

can we get some kind of interactivity using: https://github.com/scala-ide/scala-worksheet/wiki/Getting-Started


Example
=======
try gazebo with http://wiki.ros.org/kobuki_desktop?distro=indigo
when the indigo packages are available


Verification
============

current part
------------

-make the model checker:
  -cached values: emit a warning if we are not sure whether it is safe
  -internalize objects references and make sure they are shared/sync across worlds
-model takes account rounding went moving (to be on the safe side)
-integrate more realisitc models of robot (see with Ankur)
-sensors: 
  -implement a range sensor instead of the laser one
  -interference between multiple sensors

model complex model (extracted from robot description)
-------------------

once we know what kind of operations we need for the model of the physical robot, refactor using spire and make it modular

might contains routines that we can use:
    http://www.cgal.org/
    https://code.google.com/p/cgal-bindings/


If we go toward Taylor Models,
-existing tool:
    flow*: http://systems.cs.colorado.edu/research/cyberphysical/taylormodels/
-for symbolic manipulation (extracting equations from a bond graph), maybe we can interface with maxima:
    http://maxima.sourceforge.net/docs/manual/en/maxima_14.html#SEC74 (polynomial)
    http://maxima.sourceforge.net/docs/manual/en/maxima_21.html#SEC104 (diff eq)
    http://maxima.sourceforge.net/docs/manual/en/maxima_28.html#taylor
-for CAS library:
    java: http://krum.rz.uni-mannheim.de/jas/
    C++: http://issc.uj.ac.za/symbolic/symbolic.html, http://www.ginac.de/
...
