Language
========

To make things a bit simpler, we will aim for a shallow embedding into Scala and pimp it wth a few macros to make it less rough around the edges.
The macro can be used to generate a shadow state and process the changes in variable into the mouvement commands we discussed.

Backend
=======

The code we write should directly be executable using a minimal runtime + wrapper around ROS java.


context data-structure, methods
-------------------------------
-event queue
-resolving handler of a given event
-register controller and timeouts clauses
-...

initializing a context
----------------------
-allocating the memory/thread/etc.
-registering with master?, ros init?, creating the ROS topics
-executing the `onCreate` handler
-enter the big-while-loop
-init the timer if needed

the big-while-loop
------------------
-find an handler to execute:
    -rosspin (+ timeout) to get a message
-resolve and execute handler (what if no handler ?)
-set new timeout or move to another state

moving to another state
-----------------------
-move to new state
-register new controller function


Verification
============

To build on top of an explicit state model checker http://divine.fi.muni.cz/ is a good candidate.
Compared to a normal model-checking algorithm, we want two separate state-spaces:
- the state of the system at the boundaries of the discrete time steps
- the state during the execution of the controllers
The trick is knowing how/when to exchange states between the two.
For the outer MC, having the most compact storage is imoprtant. So we should go for a DFA over {0,1}.
For the inner MC, speeds matter most: simple hashtable.


If we go toward TM,
-existing tool:
    flow*: http://systems.cs.colorado.edu/research/cyberphysical/taylormodels/
-for symbolic manipulation (extracting equations from a bond graph), maybe we can interface with maxima:
    http://maxima.sourceforge.net/docs/manual/en/maxima_14.html#SEC74 (polynomial)
    http://maxima.sourceforge.net/docs/manual/en/maxima_21.html#SEC104 (diff eq)
    http://maxima.sourceforge.net/docs/manual/en/maxima_28.html#taylor
-for CAS library:
    java: http://krum.rz.uni-mannheim.de/jas/
    C++: http://issc.uj.ac.za/symbolic/symbolic.html, http://www.ginac.de/
...
