Language
========

To make things a bit simpler, we will aim for a shallow embedding into Scala and pimp it wth a few macros to make it less rough around the edges.
The macro can be used to generate a shadow state and process the changes in variable into the mouvement commands we discussed.

Documentation
=============

write a tutorial

update the ROS husky example to Jade

Runtime
=======

extends to use the `Robot.id` for inter-robot communication (actor model style), at least for ROS.

make a BBB/rPi runtime using libbulldog


Verification
============

current part
------------

-make the model checker:
  -cached values: emit a warning if we are not sure whether it is supported
  -internalize objects references and make sure they are shared/sync across worlds
  -test memoization
  -better dReal integration
-trace and error:
  -free memory before processing the trace file
  -process the trace file in a streaming fashion

model complex model (extracted from robot description)
-------------------

once we know what kind of operations we need for the model of the physical robot, refactor using spire and make it modular

more robust dReal, sundials integration

