# Language
-syntax of the robot description
-write down a formal semantics

# Frontend

## Parser

still awkward ...

need to add the physical part and specs

## Typer

nothing done yet


# Backend

Python code generation re-using what was previously done.

For the moment, let us start with the case of a single robot.

ROS publish subscribe are many-to-many communication.
By careful with the buffer semantics are dropped messages.
seems there are both publish and subscribe queue.
what about message declaration

also generate a script to boot the system: run the ROS master + the main context (source the config scripts, etc.)

## context data-structure, methods
-event queue
-resolving handler of a given event
-register controller and timeouts clauses
-...

## initializing a context
-allocating the memory/thread/etc.
-registering with master?, ros init?, creating the ROS topics
-executing the `onCreate` handler
-enter the big-while-loop
-init the timer if needed

## the big-while-loop
-find an handler to execute:
    -rosspin (+ timeout) to get a message
-resolve and execute handler (what if no handler ?)
-set new timeout or move to another state

## moving to another state
-move to new state
-register new controller function

# Verification
if we go toward TM,
-existing tool:
    flow*: http://systems.cs.colorado.edu/research/cyberphysical/taylormodels/
-for symbolic manipulation (extracting equations from a bond graph), maybe we can interface with maxima:
    http://maxima.sourceforge.net/docs/manual/en/maxima_14.html#SEC74 (polynomial)
    http://maxima.sourceforge.net/docs/manual/en/maxima_21.html#SEC104 (diff eq)
    http://maxima.sourceforge.net/docs/manual/en/maxima_28.html#taylor
-for CAS library:
    java: http://krum.rz.uni-mannheim.de/jas/
    C++: http://issc.uj.ac.za/symbolic/symbolic.html, http://www.ginac.de/
...
